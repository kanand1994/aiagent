---
- name: Automated Patch Management
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: true
  vars:
    patch_window_start: "{{ patch_start_time | default('02:00') }}"
    patch_window_end: "{{ patch_end_time | default('06:00') }}"
    reboot_required: "{{ allow_reboot | default(true) }}"
    backup_before_patch: "{{ create_backup | default(true) }}"
    rollback_on_failure: "{{ enable_rollback | default(true) }}"
    
  pre_tasks:
    - name: Check if within maintenance window
      fail:
        msg: "Current time is outside maintenance window"
      when: 
        - enforce_maintenance_window | default(false)
        - ansible_date_time.hour | int < patch_window_start.split(':')[0] | int or 
          ansible_date_time.hour | int > patch_window_end.split(':')[0] | int

    - name: Create backup snapshot (VMware)
      vmware_guest_snapshot:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ datacenter }}"
        folder: "{{ vm_folder }}"
        name: "{{ inventory_hostname }}"
        state: present
        snapshot_name: "pre-patch-{{ ansible_date_time.epoch }}"
        description: "Backup before patch deployment on {{ ansible_date_time.iso8601 }}"
      delegate_to: localhost
      when: 
        - backup_before_patch
        - ansible_virtualization_type == "VMware"

  tasks:
    - name: Gather package information (Linux)
      package_facts:
        manager: auto
      when: ansible_os_family in ['RedHat', 'Debian', 'Suse']

    - name: Check available updates (RedHat/CentOS)
      yum:
        list: updates
      register: yum_updates
      when: ansible_os_family == 'RedHat'

    - name: Check available updates (Debian/Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_cache_update
      when: ansible_os_family == 'Debian'

    - name: Get available updates list (Debian/Ubuntu)
      shell: apt list --upgradable 2>/dev/null | grep -v "WARNING"
      register: apt_updates
      when: ansible_os_family == 'Debian'
      changed_when: false

    - name: Install security updates only (RedHat/CentOS)
      yum:
        name: "*"
        state: latest
        security: yes
        update_only: yes
      register: yum_security_result
      when: 
        - ansible_os_family == 'RedHat'
        - patch_type | default('security') == 'security'

    - name: Install all updates (RedHat/CentOS)
      yum:
        name: "*"
        state: latest
        update_only: yes
      register: yum_all_result
      when: 
        - ansible_os_family == 'RedHat'
        - patch_type | default('security') == 'all'

    - name: Install security updates only (Debian/Ubuntu)
      apt:
        upgrade: safe
        update_cache: yes
        autoremove: yes
        autoclean: yes
      register: apt_security_result
      when: 
        - ansible_os_family == 'Debian'
        - patch_type | default('security') == 'security'

    - name: Install all updates (Debian/Ubuntu)
      apt:
        upgrade: dist
        update_cache: yes
        autoremove: yes
        autoclean: yes
      register: apt_all_result
      when: 
        - ansible_os_family == 'Debian'
        - patch_type | default('security') == 'all'

    - name: Install Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
        state: installed
        reboot: "{{ reboot_required }}"
        reboot_timeout: 1200
      register: windows_update_result
      when: ansible_os_family == 'Windows'

    - name: Check if reboot is required (Linux)
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family in ['RedHat', 'Debian', 'Suse']

    - name: Reboot system if required (Linux)
      reboot:
        reboot_timeout: 600
        connect_timeout: 20
        test_command: uptime
      when: 
        - reboot_required
        - ansible_os_family in ['RedHat', 'Debian', 'Suse']
        - reboot_required_file.stat.exists | default(false) or
          (yum_security_result is defined and yum_security_result.changed) or
          (yum_all_result is defined and yum_all_result.changed) or
          (apt_security_result is defined and apt_security_result.changed) or
          (apt_all_result is defined and apt_all_result.changed)

    - name: Wait for system to come back online
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required

    - name: Verify services are running post-patch
      service_facts:
      register: post_patch_services

    - name: Check critical services status
      service:
        name: "{{ item }}"
        state: started
      loop: "{{ critical_services | default(['ssh', 'sshd']) }}"
      when: ansible_os_family in ['RedHat', 'Debian', 'Suse']

    - name: Run post-patch validation tests
      block:
        - name: Test network connectivity
          uri:
            url: "{{ connectivity_test_url | default('http://google.com') }}"
            method: GET
            timeout: 10
          delegate_to: localhost

        - name: Check disk space
          shell: df -h / | awk 'NR==2 {print $5}' | sed 's/%//'
          register: disk_usage
          failed_when: disk_usage.stdout | int > 90

        - name: Verify application endpoints
          uri:
            url: "{{ item }}"
            method: GET
            timeout: 30
          loop: "{{ application_endpoints | default([]) }}"
          when: application_endpoints is defined

  post_tasks:
    - name: Generate patch report
      template:
        src: patch_report.j2
        dest: "/tmp/patch_report_{{ inventory_hostname }}_{{ ansible_date_time.epoch }}.txt"
      delegate_to: localhost

    - name: Send patch completion notification
      mail:
        to: "{{ notification_email }}"
        subject: "Patch Management Complete - {{ inventory_hostname }}"
        body: |
          Patch management has been completed for {{ inventory_hostname }}.
          
          Summary:
          - Patch Type: {{ patch_type | default('security') }}
          - Reboot Required: {{ reboot_required }}
          - Updates Installed: {{ (yum_security_result.results | default([]) + yum_all_result.results | default([]) + apt_security_result.stdout_lines | default([]) + apt_all_result.stdout_lines | default([])) | length }}
          - System Rebooted: {{ reboot_required_file.stat.exists | default(false) }}
          
          Please review the detailed patch report for more information.
      when: notification_email is defined

    - name: Update CMDB with patch status
      uri:
        url: "{{ cmdb_api_url }}/api/assets/{{ inventory_hostname }}"
        method: PATCH
        headers:
          Authorization: "Bearer {{ cmdb_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          last_patched: "{{ ansible_date_time.iso8601 }}"
          patch_level: "{{ patch_type | default('security') }}"
          patch_status: "compliant"
        status_code: [200, 204]
      delegate_to: localhost
      when: cmdb_api_url is defined

  handlers:
    - name: Rollback on failure
      block:
        - name: Restore from snapshot (VMware)
          vmware_guest_snapshot:
            hostname: "{{ vcenter_host }}"
            username: "{{ vcenter_user }}"
            password: "{{ vcenter_pass }}"
            datacenter: "{{ datacenter }}"
            folder: "{{ vm_folder }}"
            name: "{{ inventory_hostname }}"
            state: revert
            snapshot_name: "pre-patch-{{ ansible_date_time.epoch }}"
          delegate_to: localhost
          when: 
            - rollback_on_failure
            - ansible_virtualization_type == "VMware"

        - name: Send rollback notification
          mail:
            to: "{{ notification_email }}"
            subject: "ALERT: Patch Rollback Executed - {{ inventory_hostname }}"
            body: |
              A patch rollback has been executed for {{ inventory_hostname }} due to validation failures.
              
              Please investigate the issue and retry patching when resolved.
          when: notification_email is defined
      listen: "rollback patches"